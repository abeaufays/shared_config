[init]
    defaultBranch = main
[core]
    excludesFile = ~/.gitignore.global
    editor = code --wait
[branch]
    sort = -committerdate
[diff]
    algorithm = histogram
    colorMoved = plain
    mnemonicPrefix = true
    renames = true
[rebase]
    autosquash = true
    autostash = true
    updateRefs = true
[fetch]
    prune = true
    pruneTags = true
[push]
    autoSetupRemote = true
[pull]
    rebase = true
[rerere]
    enabled = true
    autoupdate = true
[alias]
    # Used for other aliases
    get-main-branch = "!git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | cut -d'/' -f4 | grep -v '^$' || git branch -l main master 2>/dev/null | head -1 | sed 's/^[* ]*//' || echo main"
    get-reference-commit = "!sh -c 'if [ $(git branch --show-current) = $(git get-main-branch) ]; then echo @~10 ; else echo $(git merge-base @ $(git get-main-branch)); fi'"
    
    st = status
    # Add Modified Files: Display modified files since last commit, select some to add to the staging area 
    amf = "!git ls-files -mo --exclude-standard | fzf -m --preview='git diff --color {}' | xargs git add"
    # Open Modified Files: Display commited files since diverting from main branch, select some and open them in vscode 
    omf = "!git diff --name-only @ $(git get-reference-commit) | fzf -m | xargs code"


    co = commit
    ame = commit --amend
    amne = commit --amend --no-edit
    wip = commit --message='TMP: [skip ci]' --allow-empty --no-verify
    
    # Fixup on with a GUI selector (requires fzf)
    fix = "!f() { git log `git get-reference-commit`..@ --pretty=format:'%h %s' | fzf | cut -c -7 | xargs git commit $1 --fixup ; }; f"
    # Alternative without fzf: add reference to commit
    # fix = commit --fixup
    # Apply Fixups
    afix = "!git rebase --autosquash `git get-reference-commit`"

    pop = reset @~
    reset-on = "!f() { git log `git get-reference-commit`^..@ --pretty=format:'%h %s' | fzf | cut -c -7 | xargs git reset $1 ; }; f"

    sw = switch
    # Switch with a GUI selector (requires fzf)
    swf = "!git branch | fzf | xargs git switch"
    # Alternative without fzf: Switch on a branch with partial name
    # swf = "!f() { git branch | grep $1 | xargs git switch; }; f"

    pf = push --force-with-lease

    # ReBase Interactive
    rbi = rebase -i
    # ReBase Main: Update main then rebase on it
    rbm = "!git fetch origin $(git get-main-branch):$(git get-main-branch); git rebase $(git get-main-branch)"
    # ReBase All: Rebase interactive on all that is new to current branch
    rba = "!git rebase -i --autosquash `git get-reference-commit`"
    # ReBase Continue
    rbc = rebase --continue


    # New BRanch: Update main then create new branch from it
    nbr = "!f() { git fetch origin $(git get-main-branch):$(git get-main-branch); git switch -c $1 $(git get-main-branch); }; f"

    spu = stash push -u
    spo = stash pop --index

    lg = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%an %cr)%Creset' --abbrev-commit --date=relative --reverse
    ll = "!git lg $(git get-reference-commit)..@"
    
    enable-commit-message-template = config --local commit.template ~/.git_commit_msg.txt
    disable-commit-message-template = config --local --unset commit.template
